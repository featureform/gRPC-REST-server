// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmbeddingHubClient is the client API for EmbeddingHub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmbeddingHubClient interface {
	CreateSpace(ctx context.Context, in *CreateSpaceRequest, opts ...grpc.CallOption) (*CreateSpaceResponse, error)
	FreezeSpace(ctx context.Context, in *FreezeSpaceRequest, opts ...grpc.CallOption) (*FreezeSpaceResponse, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	MultiSet(ctx context.Context, opts ...grpc.CallOption) (EmbeddingHub_MultiSetClient, error)
	MultiGet(ctx context.Context, opts ...grpc.CallOption) (EmbeddingHub_MultiGetClient, error)
	NearestNeighbor(ctx context.Context, in *NearestNeighborRequest, opts ...grpc.CallOption) (*NearestNeighborResponse, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (EmbeddingHub_DownloadClient, error)
	ListEntries(ctx context.Context, in *ListEntriesRequest, opts ...grpc.CallOption) (EmbeddingHub_ListEntriesClient, error)
}

type embeddingHubClient struct {
	cc grpc.ClientConnInterface
}

func NewEmbeddingHubClient(cc grpc.ClientConnInterface) EmbeddingHubClient {
	return &embeddingHubClient{cc}
}

func (c *embeddingHubClient) CreateSpace(ctx context.Context, in *CreateSpaceRequest, opts ...grpc.CallOption) (*CreateSpaceResponse, error) {
	out := new(CreateSpaceResponse)
	err := c.cc.Invoke(ctx, "/featureform.embedding.proto.EmbeddingHub/CreateSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embeddingHubClient) FreezeSpace(ctx context.Context, in *FreezeSpaceRequest, opts ...grpc.CallOption) (*FreezeSpaceResponse, error) {
	out := new(FreezeSpaceResponse)
	err := c.cc.Invoke(ctx, "/featureform.embedding.proto.EmbeddingHub/FreezeSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embeddingHubClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, "/featureform.embedding.proto.EmbeddingHub/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embeddingHubClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/featureform.embedding.proto.EmbeddingHub/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embeddingHubClient) MultiSet(ctx context.Context, opts ...grpc.CallOption) (EmbeddingHub_MultiSetClient, error) {
	stream, err := c.cc.NewStream(ctx, &EmbeddingHub_ServiceDesc.Streams[0], "/featureform.embedding.proto.EmbeddingHub/MultiSet", opts...)
	if err != nil {
		return nil, err
	}
	x := &embeddingHubMultiSetClient{stream}
	return x, nil
}

type EmbeddingHub_MultiSetClient interface {
	Send(*MultiSetRequest) error
	CloseAndRecv() (*MultiSetResponse, error)
	grpc.ClientStream
}

type embeddingHubMultiSetClient struct {
	grpc.ClientStream
}

func (x *embeddingHubMultiSetClient) Send(m *MultiSetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *embeddingHubMultiSetClient) CloseAndRecv() (*MultiSetResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MultiSetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *embeddingHubClient) MultiGet(ctx context.Context, opts ...grpc.CallOption) (EmbeddingHub_MultiGetClient, error) {
	stream, err := c.cc.NewStream(ctx, &EmbeddingHub_ServiceDesc.Streams[1], "/featureform.embedding.proto.EmbeddingHub/MultiGet", opts...)
	if err != nil {
		return nil, err
	}
	x := &embeddingHubMultiGetClient{stream}
	return x, nil
}

type EmbeddingHub_MultiGetClient interface {
	Send(*MultiGetRequest) error
	Recv() (*MultiGetResponse, error)
	grpc.ClientStream
}

type embeddingHubMultiGetClient struct {
	grpc.ClientStream
}

func (x *embeddingHubMultiGetClient) Send(m *MultiGetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *embeddingHubMultiGetClient) Recv() (*MultiGetResponse, error) {
	m := new(MultiGetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *embeddingHubClient) NearestNeighbor(ctx context.Context, in *NearestNeighborRequest, opts ...grpc.CallOption) (*NearestNeighborResponse, error) {
	out := new(NearestNeighborResponse)
	err := c.cc.Invoke(ctx, "/featureform.embedding.proto.EmbeddingHub/NearestNeighbor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embeddingHubClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (EmbeddingHub_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &EmbeddingHub_ServiceDesc.Streams[2], "/featureform.embedding.proto.EmbeddingHub/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &embeddingHubDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EmbeddingHub_DownloadClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type embeddingHubDownloadClient struct {
	grpc.ClientStream
}

func (x *embeddingHubDownloadClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *embeddingHubClient) ListEntries(ctx context.Context, in *ListEntriesRequest, opts ...grpc.CallOption) (EmbeddingHub_ListEntriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &EmbeddingHub_ServiceDesc.Streams[3], "/featureform.embedding.proto.EmbeddingHub/ListEntries", opts...)
	if err != nil {
		return nil, err
	}
	x := &embeddingHubListEntriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EmbeddingHub_ListEntriesClient interface {
	Recv() (*ListEntriesResponse, error)
	grpc.ClientStream
}

type embeddingHubListEntriesClient struct {
	grpc.ClientStream
}

func (x *embeddingHubListEntriesClient) Recv() (*ListEntriesResponse, error) {
	m := new(ListEntriesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EmbeddingHubServer is the server API for EmbeddingHub service.
// All implementations must embed UnimplementedEmbeddingHubServer
// for forward compatibility
type EmbeddingHubServer interface {
	CreateSpace(context.Context, *CreateSpaceRequest) (*CreateSpaceResponse, error)
	FreezeSpace(context.Context, *FreezeSpaceRequest) (*FreezeSpaceResponse, error)
	Set(context.Context, *SetRequest) (*SetResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	MultiSet(EmbeddingHub_MultiSetServer) error
	MultiGet(EmbeddingHub_MultiGetServer) error
	NearestNeighbor(context.Context, *NearestNeighborRequest) (*NearestNeighborResponse, error)
	Download(*DownloadRequest, EmbeddingHub_DownloadServer) error
	ListEntries(*ListEntriesRequest, EmbeddingHub_ListEntriesServer) error
	mustEmbedUnimplementedEmbeddingHubServer()
}

// UnimplementedEmbeddingHubServer must be embedded to have forward compatible implementations.
type UnimplementedEmbeddingHubServer struct {
}

func (UnimplementedEmbeddingHubServer) CreateSpace(context.Context, *CreateSpaceRequest) (*CreateSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpace not implemented")
}
func (UnimplementedEmbeddingHubServer) FreezeSpace(context.Context, *FreezeSpaceRequest) (*FreezeSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeSpace not implemented")
}
func (UnimplementedEmbeddingHubServer) Set(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedEmbeddingHubServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEmbeddingHubServer) MultiSet(EmbeddingHub_MultiSetServer) error {
	return status.Errorf(codes.Unimplemented, "method MultiSet not implemented")
}
func (UnimplementedEmbeddingHubServer) MultiGet(EmbeddingHub_MultiGetServer) error {
	return status.Errorf(codes.Unimplemented, "method MultiGet not implemented")
}
func (UnimplementedEmbeddingHubServer) NearestNeighbor(context.Context, *NearestNeighborRequest) (*NearestNeighborResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NearestNeighbor not implemented")
}
func (UnimplementedEmbeddingHubServer) Download(*DownloadRequest, EmbeddingHub_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedEmbeddingHubServer) ListEntries(*ListEntriesRequest, EmbeddingHub_ListEntriesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListEntries not implemented")
}
func (UnimplementedEmbeddingHubServer) mustEmbedUnimplementedEmbeddingHubServer() {}

// UnsafeEmbeddingHubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmbeddingHubServer will
// result in compilation errors.
type UnsafeEmbeddingHubServer interface {
	mustEmbedUnimplementedEmbeddingHubServer()
}

func RegisterEmbeddingHubServer(s grpc.ServiceRegistrar, srv EmbeddingHubServer) {
	s.RegisterService(&EmbeddingHub_ServiceDesc, srv)
}

func _EmbeddingHub_CreateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingHubServer).CreateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.embedding.proto.EmbeddingHub/CreateSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingHubServer).CreateSpace(ctx, req.(*CreateSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmbeddingHub_FreezeSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreezeSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingHubServer).FreezeSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.embedding.proto.EmbeddingHub/FreezeSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingHubServer).FreezeSpace(ctx, req.(*FreezeSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmbeddingHub_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingHubServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.embedding.proto.EmbeddingHub/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingHubServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmbeddingHub_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingHubServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.embedding.proto.EmbeddingHub/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingHubServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmbeddingHub_MultiSet_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EmbeddingHubServer).MultiSet(&embeddingHubMultiSetServer{stream})
}

type EmbeddingHub_MultiSetServer interface {
	SendAndClose(*MultiSetResponse) error
	Recv() (*MultiSetRequest, error)
	grpc.ServerStream
}

type embeddingHubMultiSetServer struct {
	grpc.ServerStream
}

func (x *embeddingHubMultiSetServer) SendAndClose(m *MultiSetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *embeddingHubMultiSetServer) Recv() (*MultiSetRequest, error) {
	m := new(MultiSetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EmbeddingHub_MultiGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EmbeddingHubServer).MultiGet(&embeddingHubMultiGetServer{stream})
}

type EmbeddingHub_MultiGetServer interface {
	Send(*MultiGetResponse) error
	Recv() (*MultiGetRequest, error)
	grpc.ServerStream
}

type embeddingHubMultiGetServer struct {
	grpc.ServerStream
}

func (x *embeddingHubMultiGetServer) Send(m *MultiGetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *embeddingHubMultiGetServer) Recv() (*MultiGetRequest, error) {
	m := new(MultiGetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EmbeddingHub_NearestNeighbor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NearestNeighborRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingHubServer).NearestNeighbor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.embedding.proto.EmbeddingHub/NearestNeighbor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingHubServer).NearestNeighbor(ctx, req.(*NearestNeighborRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmbeddingHub_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EmbeddingHubServer).Download(m, &embeddingHubDownloadServer{stream})
}

type EmbeddingHub_DownloadServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type embeddingHubDownloadServer struct {
	grpc.ServerStream
}

func (x *embeddingHubDownloadServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EmbeddingHub_ListEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListEntriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EmbeddingHubServer).ListEntries(m, &embeddingHubListEntriesServer{stream})
}

type EmbeddingHub_ListEntriesServer interface {
	Send(*ListEntriesResponse) error
	grpc.ServerStream
}

type embeddingHubListEntriesServer struct {
	grpc.ServerStream
}

func (x *embeddingHubListEntriesServer) Send(m *ListEntriesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// EmbeddingHub_ServiceDesc is the grpc.ServiceDesc for EmbeddingHub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmbeddingHub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "featureform.embedding.proto.EmbeddingHub",
	HandlerType: (*EmbeddingHubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpace",
			Handler:    _EmbeddingHub_CreateSpace_Handler,
		},
		{
			MethodName: "FreezeSpace",
			Handler:    _EmbeddingHub_FreezeSpace_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _EmbeddingHub_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _EmbeddingHub_Get_Handler,
		},
		{
			MethodName: "NearestNeighbor",
			Handler:    _EmbeddingHub_NearestNeighbor_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MultiSet",
			Handler:       _EmbeddingHub_MultiSet_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MultiGet",
			Handler:       _EmbeddingHub_MultiGet_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _EmbeddingHub_Download_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListEntries",
			Handler:       _EmbeddingHub_ListEntries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/server.proto",
}
